# version: '3.8' Não é mais necessário com versões modernas do Docker Compose (v2+).

name: TalentLink

services:
  backend:
    build:
      context: ./backend-nest # Caminho para a pasta com o Dockerfile do backend
      dockerfile: ./Dockerfile
      args:
        HOST_UID: ${HOST_UID:-1000}
        HOST_GID: ${HOST_GID:-1000}
    container_name: backend-nest
    ports:
      - '3000:3000'            # Mapeia a porta 3000 do container para a porta 3000 do host
    volumes:
      - ./backend-nest:/usr/src/app # Mapeia a pasta do backend para dentro do container
      #- backend_node_modules:/usr/src/app/node_modules # Evita problemas com dependências do Node.js
    networks:
      - dev-net
    depends_on:
      - postgres_db  # Garante que o banco de dados esteja pronto antes de iniciar o backend
    environment:
      - NODE_ENV=development   # Define o ambiente como desenvolvimento
      #- DB_HOST=db             # Nome do serviço do banco de dados
      #- DB_PORT=3306           # Porta do MySQL
      #- DB_USER=nest           # Usuário do banco de dados
      #- DB_PASSWORD=nest123    # Senha do banco de dados
      #- DB_NAME=nestapp        # Nome do banco de dados
      #- TYPEORM_CONNECTION=mysql # Tipo de conexão do TypeORM
      #- TYPEORM_SYNCHRONIZE=true # Sincroniza o banco de dados automaticamente (cuidado em produção)
      #- TYPEORM_LOGGING=true   # Habilita o logging do
      #- TYPEORM_MIGRATIONS_RUN=true # Executa migrações automaticamente (cuidado em produção)
      #- TYPEORM_MIGRATIONS=src/migrations/*.ts # Caminho para as migrações do TypeORM
      #- TYPEORM_ENTITIES=src/entities/*.ts # Caminho para as entidades do TypeORM
      #- TYPEORM_MIGRATIONS_DIR=src/migrations # Diretório para as migrações
      #- TYPEORM_ENTITIES_DIR=src/entities # Diretório para as entidades
      #- TYPEORM_MIGRATIONS_TABLE_NAME=typeorm_migrations # Nome da tabela de migrações
      #- TYPEORM_MIGRATIONS_TRANSACTION_MODE=each # Modo de transação para migrações
      #- TYPEORM_MIGRATIONS_RUN_ON_START=true # Executa migrações ao iniciar o serviço
    working_dir: /usr/src/app # diretório padrão de trabalho dentro do container
    command: sh -c "npm install && npm run start:dev" # Instala as dependências e inicia o backend em modo de desenvolvimento
    #user: node # usuário para evitar problemas de permissão
    #command: npm run start:dev # Comando para iniciar o backend em modo de desenvolvimento


  frontend:
    build:
      context: ./frontend-angular   # Caminho para a pasta com o Dockerfile do frontend
      dockerfile: ./Dockerfile        # Dockerfile do frontend
    container_name: frontend-angular
    ports:
      - '4200:4200'                 # Mapeia a porta 4200 do container para a porta 4200 do host
    volumes:
      - ./frontend-angular:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    networks:
      - dev-net
    #command: npm start  # Comando para iniciar o frontend em modo de desenvolvimento 
    # command: sh -c "npm install && npm start" # Instala as dependências e inicia o frontend em modo de desenvolvimento 
    environment:
      - NODE_ENV=development
    #- CHOKIDAR_USEPOLLING=true   # Necessário para o Angular em ambientes de contêiner   
    # CHOKIDAR_USEPOLLING=true é usado para garantir que o Angular detecte mudanças em arquivos dentro do contêiner 
    # e recarregue automaticamente, especialmente em sistemas de arquivos que não suportam notificações de mudança.
    working_dir: /usr/src/app # diretório padrão de trabalho dentro do container
    #user: node # usuário para evitar problemas de permissão

  mysql_db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: nestapp
      MYSQL_USER: nest
      MYSQL_PASSWORD: nest123
    ports:
      - '3306:3306'           # Mapeia a porta 3306 do container para a porta 3306 do host
    volumes:
      - ./mysql-data:/var/lib/mysql   # Mapeia a pasta local para persistência de dados
    networks:
      - dev-net
  
  postgres_db:
    image: postgres:15 # Versão estável do PostgreSQL
    container_name: postgres-db # Nome do container
    environment:
      POSTGRES_DB: nestjs_db # Nome do banco de dados que o NestJS vai usar
      POSTGRES_USER: nestjs_user # Usuário para o NestJS se conectar
      POSTGRES_PASSWORD: nestjs_password # Senha para o NestJS se conectar
    ports:
      - "5432:5432" # Porta padrão do PostgreSQL. Certifique-se de que não está em uso.
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume para persistência de dados do PostgreSQL
    networks:
      - dev-net
networks:
  dev-net:
    driver: bridge # Usa o driver de rede bridge padrão do Docker

volumes:
  frontend_node_modules:
  backend_node_modules:
  postgres_data:
